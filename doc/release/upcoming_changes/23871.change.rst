Truthyness of NumPy strings changed
-----------------------------------
NumPy strings previously were inconsistent about how they defined
if the string is ``True`` or ``False`` and the definition did not
match the one used by Python.
Strings are now considered ``True`` when they are non-empty and
``False`` when they are empty.
This changes the following distinct cases:

* Casts from string to boolean were previously roughly equivalent
  to ``string_array.astype(np.int64).astype(bool)``, meaning that only
  valid integers could be cast.
  Now a string of ``"0"`` will be considered ``True`` since it is not empty.
  If you need the old behavior, you may use the above step (casting
  to integer first) or ``string_array == "0"`` (if the input is only ever ``0`` or ``1``).
  To get the new result on old NumPy versions use ``string_array != ""``.
* ``np.nonzero(string_array)`` previously ignored whitespace so that
  a string only containing whitespace was considered ``False``.
  Whitespace is now considered ``True``.

This change does not affect ``np.loadtxt``, ``np.fromstring``, or ``np.genfromtxt``.
The first two still use the integer definition, while ``genfromtxt`` continues to
match for ``"true"`` (ignoring case).
However, if ``np.bool_`` is used as a converter the result will change.

The change does affect ``np.fromregex`` as it uses direct assignments.
