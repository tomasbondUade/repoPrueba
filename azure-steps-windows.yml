steps:
- script: git submodule update --init
  displayName: 'Fetch submodules'
- task: UsePythonVersion@0
  inputs:
    versionSpec: $(PYTHON_VERSION)
    addToPath: true
    architecture: $(PYTHON_ARCH)

- script: python -m pip install --upgrade pip wheel
  displayName: 'Install tools'

- script: python -m pip install -r test_requirements.txt
  displayName: 'Install dependencies; some are optional to avoid test skips'

- powershell: |
    # Note that rtools 42+ does not support 32 bits builds. We dropped testing
    # those, but if there's a need to go back on that, use version 4.0.0.20220206
    choco install --confirm --no-progress --allow-downgrade rtools --version=4.3.5550
    choco install unzip -y
    choco install -y --checksum 6004DF17818F5A6DBF19CB335CC92702 pkgconfiglite
    echo "##vso[task.setvariable variable=RTOOLS43_HOME]c:\rtools43"
  displayName: 'Install utilities'

- powershell: |
    $ErrorActionPreference = "Stop"
    mkdir  C:/opt/openblas/openblas_dll
    mkdir  C:/opt/32/lib/pkgconfig
    mkdir  C:/opt/64/lib/pkgconfig
    # TBD: support 32 bit testing
    $target=$(python -c "import tools.openblas_support as obs; plat=obs.get_plat(); ilp64=obs.get_ilp64(); target=f'openblas_{plat}.zip'; obs.download_openblas(target, plat, ilp64);print(target)")
    unzip -o -d c:/opt/ $target
    echo "##vso[task.setvariable variable=PKG_CONFIG_PATH]c:/opt/64/lib/pkgconfig"
    copy C:/opt/64/bin/*.dll C:/opt/openblas/openblas_dll
  displayName: 'Download / Install OpenBLAS'

- powershell: |
    If ( Test-Path env:NPY_USE_BLAS_ILP64 ) {
        $env:OPENBLAS64_="openblas"
        # This does not work, the flags are passed together and not separately
        $env:CFLAGS="-DBLAS_SYMBOL_SUFFIX=64_ -DHAVE_BLAS_ILP64"
        $env:CXXFLAGS="-DBLAS_SYMBOL_SUFFIX=64_ -DHAVE_BLAS_ILP64"
    } else {
        $env:OPENBLAS = "openblas"
    }
    python -c "from tools import openblas_support; openblas_support.make_init('numpy')"
    python -m pip install . --config-settings=setup-args="--vsenv"
    # copy from c:/opt/openblas/openblas_dll to numpy/.libs
    $target = $(python -c "import sysconfig; print(sysconfig.get_path('platlib'))")
    mkdir $target/numpy/.libs
    copy C:/opt/openblas/openblas_dll/*.dll $target/numpy/.libs
  displayName: 'Build NumPy'

- script: |
    python -m pip install threadpoolctl
    python tools/openblas_support.py --check_version
  displayName: 'Check OpenBLAS version'

- powershell: |
    cd tools  # avoid root dir to not pick up source tree
    # Get a gfortran onto the path for f2py tests
    $env:PATH = "$env:RTOOLS43_HOME\\x86_64-w64-mingw32.static.posix\\bin;$env:PATH"
    If ( $env:TEST_MODE -eq "full" ) {
      pytest --pyargs numpy -rsx --junitxml=junit/test-results.xml
    } else {
      pytest --pyargs numpy -m "not slow" -rsx --junitxml=junit/test-results.xml
    }
  displayName: 'Run NumPy Test Suite'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'Publish test results for Python $(PYTHON_VERSION) $(BITS)-bit $(TEST_MODE) Windows'
